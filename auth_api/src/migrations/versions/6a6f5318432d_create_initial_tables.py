"""Create initial tables

Revision ID: 6a6f5318432d
Revises:
Create Date: 2023-04-09 12:08:24.766710

"""
from datetime import datetime
from uuid import uuid4

import sqlalchemy as sa

from alembic import op
from sqlalchemy import FetchedValue

# revision identifiers, used by Alembic.
revision = '6a6f5318432d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Create schema "content" if it doesn't exist
    op.execute('CREATE SCHEMA IF NOT EXISTS content;')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'roles',
        sa.Column('name', sa.String(length=50), nullable=True),
        sa.Column('description', sa.String(length=255), nullable=True),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('name'),
        schema='content',
    )

    # define the 'roles' table schema for bulk_insert
    roles_table = sa.table(
        'roles',
        sa.column('id', sa.String),
        sa.column('name', sa.String),
        sa.column('description', sa.String),
        sa.column('created_at', sa.DateTime),
        sa.column('updated_at', sa.DateTime),
        schema='content',
    )

    # get the current UTC date and time
    now = datetime.utcnow()

    # insert the data into the 'roles' table
    op.bulk_insert(
        roles_table,
        [
            {
                'id': str(uuid4()),
                'name': 'user',
                'description': 'Regular user with basic access',
                'created_at': now,
                'updated_at': now,
            },
            {
                'id': str(uuid4()),
                'name': 'subscriber',
                'description': 'User with access to all movies',
                'created_at': now,
                'updated_at': now,
            },
            {
                'id': str(uuid4()),
                'name': 'moderator',
                'description': 'Moderator with limited access',
                'created_at': now,
                'updated_at': now,
            },
            {
                'id': str(uuid4()),
                'name': 'superuser',
                'description': 'Administrator with full access',
                'created_at': now,
                'updated_at': now,
            },
        ],
    )

    op.create_table(
        'users',
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=50), nullable=True),
        sa.Column('fs_uniquifier', sa.String(length=255), nullable=False),
        sa.Column('password', sa.String(length=255), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('is_totp_enabled', sa.Boolean(), nullable=False),
        sa.Column('two_factor_secret', sa.String(length=255), nullable=True),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('fs_uniquifier'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('username'),
        schema='content',
    )
    op.create_table(
        'auth_history',
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('ip_address', sa.String(length=50), nullable=False),
        sa.Column('user_agent', sa.String(length=255), nullable=False),
        sa.Column('is_successful', sa.Boolean(), nullable=False),
        sa.Column('device', sa.String(length=255), nullable=False),
        sa.Column('auth_event_type', sa.String(length=50), nullable=False),
        sa.Column(
            'auth_event_time',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column('auth_event_fingerprint', sa.String(length=255), nullable=False),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['content.users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', 'device'),
        schema='content',
        postgresql_partition_by='LIST (device)',
    )

    op.execute(
        """CREATE TABLE IF NOT EXISTS auth_history_desktop PARTITION OF content.auth_history FOR VALUES IN (
        'desktop');"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth_history_tablet PARTITION OF content.auth_history FOR VALUES IN (
        'tablet');"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth_history_mobile PARTITION OF content.auth_history FOR VALUES IN (
        'mobile');"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth_history_other PARTITION OF content.auth_history FOR VALUES IN (
        'other');"""
    )

    op.create_table(
        'social_accounts',
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('social_id', sa.String(length=255), nullable=False),
        sa.Column('social_provider_name', sa.String(length=50), nullable=False),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['content.users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='content',
    )
    op.create_table(
        'tokens',
        sa.Column('token_owner_id', sa.UUID(), nullable=False),
        sa.Column('token_value', sa.Text(), nullable=False),
        sa.Column('token_used', sa.Boolean(), nullable=True),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column(
            'expires_at',
            sa.DateTime(timezone=True),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ['token_owner_id'],
            ['content.users.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='content',
    )
    op.create_table(
        'user_roles',
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('role_id', sa.UUID(), nullable=True),
        sa.Column('id', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(['role_id'], ['content.roles.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['content.users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='content',
    )
    # ### end Alembic commands ###


def downgrade():
    # Drop schema "content" if it exists and all tables
    op.execute('DROP SCHEMA IF EXISTS content CASCADE;')
    # ### end Alembic commands ###
