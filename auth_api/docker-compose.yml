version: '3.8'

x-env-file: &services-env-file
  env_file:
    - ./.env

services:
  auth_db:
    container_name: auth_db
    image: postgres:15.2
    healthcheck:
      test: /usr/bin/pg_isready --username=$POSTGRES_USER --dbname=$POSTGRES_DB
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    <<: *services-env-file
    networks:
      - backend
    restart: always

  auth_redis:
    image: redis:7.0.9
    container_name: auth_redis
    networks:
      - backend

  auth_app:
    container_name: auth_app
    build:
      context: ./src
      dockerfile: Dockerfile
    <<: *services-env-file
    volumes:
      - ./src/migrations:/app/migrations
      - ./design:/app/design
    networks:
      - backend
    restart: always
    depends_on:
     - auth_db
     - auth_redis

  auth_swagger:
    image: swaggerapi/swagger-ui
    container_name: auth_swagger
    ports:
      - "${SWAGGER_PORT}:${SWAGGER_CONTAINER_PORT}"
    volumes:
      - ./design:/usr/share/nginx/html/doc
    environment:
      API_URL: /doc/openapi.yaml
    depends_on:
      - auth_app
    profiles:
      - testing

  nginx:
    container_name: auth_nginx
    image: nginx:1.21
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth_app
    networks:
      - backend
    ports:
      - "${NGINX_PORT}:${NGINX_CONTAINER_PORT}"


  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_TRACES_ENABLED=true
      - COLLECTOR_OTLP_HTTP_TRACES_ENABLED=true
      - COLLECTOR_OTLP_METRICS_ENABLED=true
    ports:
      - "16686:16686" # Jaeger UI
      - "13133:13133" # Health Check
      - "14250:14250" # OTLP/gRPC
      - "14268:14268" # Jaeger HTTP Thrift
      - "5775:5775/udp" # Jaeger Agent Compact Thrift
      - "6831:6831/udp" # Jaeger Agent Compact Thrift
      - "6832:6832/udp" # Jaeger Agent Binary Thrift
      - "5778:5778" # Jaeger Agent HTTP
      - "55680:55680" # OTLP
      - "9411:9411" # Zipkin
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    name: backend
    driver: bridge
