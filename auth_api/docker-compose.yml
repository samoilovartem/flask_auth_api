version: '3.8'

x-env-file: &services-env-file
  env_file:
    - ./.env

services:
  auth_db:
    container_name: auth_db
    image: postgres:15.2
    healthcheck:
      test: /usr/bin/pg_isready --username=$POSTGRES_USER --dbname=$POSTGRES_DB
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    <<: *services-env-file
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_CONTAINER_PORT}"
    networks:
      - backend
    restart: always

  auth_redis:
    image: redis:7.0.9
    container_name: auth_redis
    ports:
      - "${REDIS_PORT}:${REDIS_CONTAINER_PORT}"
    networks:
      - backend

  auth_app:
    container_name: auth_app
    build:
      context: ./src
      dockerfile: Dockerfile
    <<: *services-env-file
    ports:
      - "${AUTH_PORT}:${AUTH_CONTAINER_PORT}"
    volumes:
      - ./src/migrations:/app/migrations
    networks:
      - backend
    restart: always
    depends_on:
     - auth_db
     - auth_redis

  auth_swagger:
    image: swaggerapi/swagger-ui
    container_name: auth_swagger
    ports:
      - "8080:8080"
    volumes:
      - ./design:/usr/share/nginx/html/doc
    environment:
      API_URL: doc/openapi.yaml
    depends_on:
      - auth_app
    profiles:
      - testing

  nginx:
    container_name: auth_nginx
    image: nginx:1.21
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth_app
    networks:
      - backend
    ports:
      - "${NGINX_PORT}:${NGINX_CONTAINER_PORT}"

volumes:
  postgres_data:

networks:
  backend:
    name: backend
    driver: bridge
